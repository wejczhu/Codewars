
// Simple reversed parenthesis
// Given a string, return the minimal number of parenthesis reversals needed to make balanced parenthesis.

#include <iostream>
#include <cmath>

int solve(std::string s)
{
    if (s.length()%2 != 0)
    {
        return -1;
    }

    int right = 0;
    int left = 0;
    int result = 0;

    if (s[0] == ')')
    {
        result++;
    }

    if (s[(s.length()-1)] == '(')
    {
        result++;
    }

    for (auto i : s)
    {
        if (i == '(')
        {
            left++;
        }
        else if (i == ')')
        {
            right++;
        }
    }

    return result + abs(left - right);
}


int main()
{
    std::string test = "())(((";
    int result = solve(test);
    std::cout << result << std::endl;
    return 0;
}

